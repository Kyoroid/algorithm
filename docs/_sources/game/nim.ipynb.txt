{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python38164bitpy38envvenvdb5a67ba2d164185bbc60d730ae2e1eb",
   "display_name": "Python 3.8.1 64-bit ('py38env': venv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Nim\n",
    "\n",
    "[ニム(Wikipedia)](https://ja.wikipedia.org/wiki/%E3%83%8B%E3%83%A0)  \n",
    "[石取りゲーム(Nim)](https://ikatakos.com/pot/programming_algorithm/game/nim)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nimは不偏ゲームと呼ばれるゲームの1つで、必勝法が存在する。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nimの必勝法\n",
    "\n",
    "初期状態における石の山それぞれについて、石の個数の排他的論理和をとる。  \n",
    "このとき、 $\\bigoplus_i^N a_i \\neq 0$ ならば先攻に必勝法が、$\\bigoplus_i^N a_i = 0$ ならば後攻に必勝法が存在する。  \n",
    "特に、両者が常に最適な一手を選ぶならば、初期状態のみで勝敗が判定できる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from functools import reduce\n",
    "from operator import xor\n",
    "\n",
    "\n",
    "def solve_nim(X):\n",
    "    return reduce(xor, X) != 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "上の関数は、先攻に必勝法が存在するならば`True`を、後攻に必勝法が存在するならば`False`を返す。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Win\n"
    }
   ],
   "source": [
    "X = [2, 3, 5, 7]\n",
    "print(\"Win\" if solve_nim(X) else \"Lose\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Lose\n"
    }
   ],
   "source": [
    "X = [3, 6, 12, 9]\n",
    "print(\"Win\" if solve_nim(X) else \"Lose\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 不偏ゲームと状態遷移図\n",
    "\n",
    "Nimでは両者が最適に動くとき、「勝ち状態」 $\\bigoplus_i^N a_i \\neq 0$ と「負け状態」 $\\bigoplus_i^N a_i = 0$ が交互に繰り返される。  \n",
    "Nimを含む不偏ゲームでは、状態を上手く定義することにより、次のような状態遷移図を作ることができる。\n",
    "\n",
    "![state_basic](images/state_basic.svg)\n",
    "\n",
    "勝ち状態からは、勝ち状態と負け状態のいずれにも移動できる。  \n",
    "一方、負け状態からは常に勝ち状態へしか移動できない。  \n",
    "負け状態は終端状態 (Nimの場合は石が全てなくなった状態) を含む。\n",
    "\n",
    "### 先攻が勝つとき\n",
    "\n",
    "先攻が勝つには、ゲームの初期状態が勝ち状態で、かつ先攻のプレイヤーが勝ち状態を維持するように手を選べばよい。  \n",
    "先攻が「勝ち状態から負け状態への移動」を選択するのが最適で、このとき後攻は常に負け状態で回ってくる。\n",
    "\n",
    "![state_win](images/state_win.svg)\n",
    "\n",
    "### 後攻が勝つとき\n",
    "\n",
    "後攻が勝つとき、初期状態は負け状態である。  \n",
    "先攻はどのような手を選んでも、「負け状態から勝ち状態への移動」となる。  \n",
    "後攻が「勝ち状態から負け状態への移動」を選択することにより、先攻は常に負け状態で回ってくる。\n",
    "\n",
    "![state_lose](images/state_lose.svg)\n"
   ]
  }
 ]
}