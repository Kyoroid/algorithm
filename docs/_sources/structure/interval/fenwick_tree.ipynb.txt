{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.8.10 64-bit ('py38env': venv)",
   "metadata": {
    "interpreter": {
     "hash": "fa0e30685626637fcda81ebca9982750cef985a3d7ed2872bf400038cee5904e"
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Fenwick Tree\n",
    "\n",
    "Code: [fenwick_tree.py](https://github.com/Kyoroid/algorithm/blob/master/lib/structure/fenwick_tree.py)  \n",
    "Test: [test_fenwick_tree.py](https://github.com/Kyoroid/algorithm/blob/master/test/structure/test_fenwick_tree.py)\n",
    "\n",
    "https://www.slideshare.net/hcpc_hokudai/binary-indexed-tree  \n",
    "https://atcoder.github.io/ac-library/master/document_ja/fenwicktree.html\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Fenwick Tree とは\r\n",
    "\r\n",
    "Fenwick Tree または Binary Indexed Tree (BIT) は、累積和に更新操作を加えたデータ構造。  \r\n",
    "セグメント木の機能を削り、実装を単純化したものともみなせる。\r\n",
    "\r\n",
    "$n$ 個の要素について、次の操作を行うことができる。\r\n",
    "\r\n",
    "- 初期化: $\\mathcal{O}(n)$\r\n",
    "- 要素1つに対する加算: $\\mathcal{O}(\\log{n})$\r\n",
    "- 部分和を求める問い合わせ: $\\mathcal{O}(\\log{n})$\r\n",
    "\r\n",
    "部分和では区間 $[0, r)$ の和が求まる。  \r\n",
    "任意の区間 $[l, r)$ の和を求めるには、累積和と同様に $[0, r)$ の部分和から $[0, l)$ の部分和を引けばよい。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 原理\r\n",
    "\r\n",
    "BITの加算操作・更新操作ではセグメント木と同様に、ノード間の移動が発生する。  \r\n",
    "セグメント木ではこれをビットシフトや再帰で計算していたが、BITではノードの添え字を2進数で表したときの\"1\"であるビットの位置を利用して計算する。\r\n",
    "\r\n",
    "ノード間の移動では特に、「最下位が\"1\"であるビットの位置」を順次取得することになる。  \r\n",
    "これは符号付き2進数を用いて $a \\land -a$ で求めることができる。\r\n",
    "\r\n",
    "$$\r\n",
    "\\begin{eqnarray}\r\n",
    "6 \\land -6 &=& 0110_{(2)} \\land 1010_{(2)} \\\\\r\n",
    "&=& 0010_{(2)} \\\\\r\n",
    "\\end{eqnarray}\r\n",
    "$$\r\n",
    "\r\n",
    "$a \\land -a$ の計算結果はビットが1か所だけ立つ。この場所が「最下位が\"1\"であるビットの位置」となる。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 実装 (Numpy + Numba)\r\n",
    "\r\n",
    "配列を1つ多く確保し、参照を 1-indexed とすると実装しやすい。"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "source": [
    "import numpy as np\n",
    "from numba import jitclass, i8\n",
    "\n",
    "\n",
    "@jitclass([(\"n\", i8), (\"tree\", i8[:])])\n",
    "class FenwickTree:\n",
    "    def __init__(self, n: i8) -> None:\n",
    "        \"\"\"Fenwick Treeを初期化します。\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        n : i8\n",
    "            要素数\n",
    "        \"\"\"\n",
    "        self.n = n\n",
    "        self.tree = np.zeros(n + 1, dtype=np.int64)\n",
    "    \n",
    "    def _rsum(self, r):\n",
    "        s = 0\n",
    "        while r > 0:\n",
    "            s += self.tree[r]\n",
    "            r -= r & -r\n",
    "        return s\n",
    "\n",
    "    def sum(self, l: i8, r: i8) -> i8:\n",
    "        \"\"\"区間[l, r) の総和を返します。\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        l : i8\n",
    "            区間の左端\n",
    "        r : i8\n",
    "            区間の右端\n",
    "\n",
    "        Returns\n",
    "        -------\n",
    "        i8\n",
    "            区間[l, r) の総和\n",
    "        \"\"\"\n",
    "        return self._rsum(r) - self._rsum(l)\n",
    "\n",
    "    def add(self, i: i8, x: i8) -> None:\n",
    "        \"\"\"添字iにxを加算します。\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        i : i8\n",
    "            添字\n",
    "        x : i8\n",
    "            加数\n",
    "        \"\"\"\n",
    "        i += 1\n",
    "        while i <= self.n:\n",
    "            self.tree[i] += x\n",
    "            i += i & -i\n"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## 使用例\n",
    "\n",
    "Accepted:  \n",
    "https://atcoder.jp/contests/practice2/submissions/26325029"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "source": [
    "from numba import njit\n",
    "\n",
    "def generate_input():\n",
    "    input_string = \"\"\"5 5\n",
    "    1 2 3 4 5\n",
    "    1 0 5\n",
    "    1 2 4\n",
    "    0 3 10\n",
    "    1 0 5\n",
    "    1 0 3\n",
    "    \"\"\"\n",
    "    for line in input_string.splitlines():\n",
    "        yield line\n",
    "\n",
    "input = generate_input().__next__\n",
    "\n",
    "def read():\n",
    "    N, Q = map(int, input().strip().split())\n",
    "    A = np.fromstring(input().strip(), sep=\" \", dtype=np.int64)\n",
    "    queries = np.empty((Q, 3), dtype=np.int64)\n",
    "    for i in range(Q):\n",
    "        queries[i, :] = np.fromstring(input().strip(), sep=\" \", dtype=np.int64)\n",
    "    return N, Q, A, queries\n",
    "\n",
    "@njit((i8, i8, i8[:], i8[:, :]), cache=True)\n",
    "def solve(N, Q, A, queries):\n",
    "    ft = FenwickTree(N)\n",
    "    for i in range(N):\n",
    "        ft.add(i, A[i])\n",
    "    for i in range(Q):\n",
    "        query = queries[i, :]\n",
    "        if query[0] == 0:\n",
    "            p, x = query[1:]\n",
    "            ft.add(p, x)\n",
    "        elif query[0] == 1:\n",
    "            l, r = query[1:]\n",
    "            print(ft.sum(l, r))\n",
    "\n",
    "solve(*read())"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "15\n7\n25\n6\n"
     ]
    }
   ],
   "metadata": {
    "tags": []
   }
  }
 ]
}