{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 合同"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 整数を法とする合同\n",
    "\n",
    "[Wikipedia](https://ja.wikibooks.org/wiki/%E5%88%9D%E7%AD%89%E6%95%B4%E6%95%B0%E8%AB%96/%E5%90%88%E5%90%8C%E5%BC%8F#%E5%AE%9A%E7%BE%A9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 定義\n",
    "\n",
    "整数 $a, b, m$ に関して\n",
    "\n",
    "$$\n",
    "a-b \\in \\{km \\mid k=0, \\pm 1, \\pm 2, \\pm 3, \\ldots\\}\n",
    "$$\n",
    "\n",
    "が成り立つとき、「整数 $a, b$ が法 $m$ に関して合同である」という。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 表記\n",
    "\n",
    "「整数 $a, b$ が法 $m$ に関して合同である」ことを、次のように表記する。\n",
    "\n",
    "$$\n",
    "\\begin{eqnarray}\n",
    "a &\\equiv& b \\pmod{m} \\\\\n",
    "a &\\equiv& b\n",
    "\\end{eqnarray}\n",
    "$$\n",
    "\n",
    "などと書く。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 加算・乗算・減算・べき乗\n",
    "\n",
    "$n$を整数とする。$a_1 \\equiv b_1 , a_2 \\equiv b_2$のとき、加法・乗法が定義される。\n",
    "\n",
    "$$\n",
    "\\begin{eqnarray}\n",
    "a_1 + a_2 &\\equiv& b_1 + b_2 \\\\\n",
    "a_1 a_2 &\\equiv& b_1 b_2 \\\\\n",
    "\\end{eqnarray}\n",
    "$$\n",
    "\n",
    "加減算、乗算、べき乗は次のようになる。\n",
    "\n",
    "$$\n",
    "\\begin{eqnarray}\n",
    "a \\pm x &\\equiv& b \\pm x && \\\\\n",
    "ax &\\equiv& bx && \\\\\n",
    "a^x &\\equiv& b^x && (x>0) \\\\\n",
    "\\end{eqnarray}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 逆元\n",
    "\n",
    "合同式では $\\gcd(a, m) = 1$ (整数$a$と法$m$が互いに素) のときに限り、逆元 ([モジュラ逆数](https://ja.wikipedia.org/wiki/%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%A9%E9%80%86%E6%95%B0)) $a^{-1}$が次のように定義される。\n",
    "\n",
    "$$\n",
    "a a^{-1} \\equiv 1\n",
    "$$\n",
    "\n",
    "### 逆元計算\n",
    "\n",
    "逆元の値は[拡張ユークリッドの互除法](euclidean_algorithm_proof.ipynb)により求めることができる。  \n",
    "逆元の定義より\n",
    "\n",
    "$$\n",
    "a a^{-1} - 1 \\equiv 0 \\pmod{m}\n",
    "$$\n",
    "\n",
    "であるから、これを合同式ではなく等式として表すと\n",
    "\n",
    "$$\n",
    "\\begin{array}\n",
    "a a^{-1} - 1 = mk & (k \\in \\mathbb{N})\n",
    "\\end{array}\n",
    "$$\n",
    "\n",
    "となる。これを変形し\n",
    "\n",
    "$$\n",
    "a a^{-1} + m(-k) = 1\n",
    "$$\n",
    "\n",
    "とする。ここで制約\n",
    "\n",
    "$$\n",
    "\\gcd(a, m) = 1\n",
    "$$\n",
    "\n",
    "をおくと、等式は拡張ユークリッドの互除法の式 $ax + my = \\gcd(a, m)$ と一致する。  \n",
    "つまり、 $\\gcd(a, m) = 1$ となる$a, m$ に対して $a a^{-1} + m(-k) = 1$ の解が存在し、その解は\n",
    "\n",
    "$$\n",
    "(x, y) = (a^{-1}, -k)\n",
    "$$\n",
    "\n",
    "となる。同時に逆元 $a^{-1}$ が $x$ の値として求まる。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 逆元計算の実装"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.setrecursionlimit(200000)\n",
    "\n",
    "\n",
    "def extgcd(a, b):\n",
    "    if a < b:\n",
    "        m, y, x = extgcd(b, a)\n",
    "        return (m, x, y)\n",
    "    if b == 0:\n",
    "        x = 1\n",
    "        y = 0\n",
    "        return (a, x, y)\n",
    "    m, y, x = extgcd(b, a % b)\n",
    "    y = y - a // b * x\n",
    "    return (m, x, y)\n",
    "\n",
    "\n",
    "def inv(a, m):\n",
    "    n, x, y = extgcd(a, m)\n",
    "    if n != 1:\n",
    "        raise ValueError(\"{} and {} are not mutually prime.\".format(a, m))\n",
    "    return x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\gcd(a, m) = 1$ が成り立つときは、逆元 $a^{-1}$ を返す。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "a = 10\n",
    "m = 2019\n",
    "print(\"gcd({a}, {m}) = {d}\".format(a=a, m=m, d=math.gcd(a, m)))\n",
    "\n",
    "a_inv = inv(a, m)\n",
    "print(\"{a}^-1 \\u2261 {d} (mod {m})\".format(a=a, m=m, d=a_inv))\n",
    "print(\"{a} * {a}^-1 \\u2261 {d} (mod {m})\".format(a=a, m=m, d=a * a_inv % m))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\gcd(a, m) = 1$ が成り立たない場合は例外を送出する。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "a = 10\n",
    "m = 2020\n",
    "print(\"gcd({a}, {m}) \\u2261 {d}\".format(a=a, m=m, d=math.gcd(a, m)))\n",
    "\n",
    "try:\n",
    "    inv(a, m)\n",
    "except ValueError as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 除算\n",
    "\n",
    "除算 $a \\div b$ は、逆元との積として定義される。  \n",
    "逆元の定義より、 $\\gcd(b, m) = 1$ となる整数 $b$ に対してのみ除算が可能である。\n",
    "\n",
    "$$\n",
    "a \\div b \\equiv a \\times b^{-1}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 素数を法とする合同"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 逆元\n",
    "\n",
    "法 $p$ が素数で $\\gcd(a, p)=1$ を満たす場合は、拡張ユークリッドの互除法を使わずに、累乗により逆元を求めることもできる。\n",
    "\n",
    "整数 $a$ と互いに素である素数 $p$ をおく。[フェルマーの小定理](https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A7%E3%83%AB%E3%83%9E%E3%83%BC%E3%81%AE%E5%B0%8F%E5%AE%9A%E7%90%86)\n",
    "\n",
    "$$\n",
    "a^{p-1} \\equiv 1 \\pmod{p}\n",
    "$$\n",
    "\n",
    "より、逆元に関する次の合同式が成り立つ。\n",
    "\n",
    "$$\n",
    "\\begin{eqnarray}\n",
    "a a^{-1} &\\equiv& a a^{p-2} \\equiv 1 \\pmod{p} \\\\\n",
    "a^{-1} &\\equiv& a^{p-2} \\pmod{p} \\\\\n",
    "\\end{eqnarray}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 逆元計算の実装\n",
    "\n",
    "Pythonにおいては、 `pow`の第三引数を用いて累乗のmodを計算できる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pinv(a, p):\n",
    "    return pow(a, p-2, p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 131\n",
    "m = 10**9+7\n",
    "a_pinv = pinv(a, m)\n",
    "print(\"{a}^-1 \\u2261 {d} (mod {m})\".format(a=a, m=m, d=a_pinv))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a_inv = inv(a, m)\n",
    "print(\"{a}^-1 \\u2261 {d} (mod {m})\".format(a=a, m=m, d=a_inv))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ModInt\n",
    "\n",
    "[operator overload](https://tell-k.github.io/pyconjp2016/#49)\n",
    "\n",
    "法 $m$ における整数を`ModInt`として定義する。  \n",
    "`int`はイミュータブルオブジェクトなので、`__init__`では初期化できないことに注意。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ModInt(int):\n",
    "    \n",
    "    MOD = 10**9+7\n",
    "\n",
    "    def __new__(cls, x, *args, **kwargs):\n",
    "        return super().__new__(cls, x % ModInt.MOD)\n",
    "\n",
    "    def __add__(self, other):\n",
    "        return ModInt(super().__add__(other) % ModInt.MOD)\n",
    "    \n",
    "    def __radd__(self, other):\n",
    "        return ModInt(super().__radd__(other) % ModInt.MOD)\n",
    "    \n",
    "    def __mul__(self, other):\n",
    "        return ModInt(super().__mul__(other) % ModInt.MOD)\n",
    "    \n",
    "    def __rmul__(self, other):\n",
    "        return ModInt(super().__rmul__(other) % ModInt.MOD)\n",
    "    \n",
    "    def __pow__(self, other, *args):\n",
    "        return ModInt(super().__pow__(other, ModInt.MOD))\n",
    "\n",
    "    def __rpow__(self, other, *args):\n",
    "        raise NotImplementedError()\n",
    "    \n",
    "    def __truediv__(self, other):\n",
    "        inv = ModInt(other).inverse()\n",
    "        return ModInt(super().__mul__(inv) % ModInt.MOD)\n",
    "    \n",
    "    def __floordiv__(self, other):\n",
    "        return self.__truediv__(other)\n",
    "    \n",
    "    def __rtruediv__(self, other):\n",
    "        return ModInt(self.inverse().__mul__(other))\n",
    "    \n",
    "    def __rfloordiv__(self, other):\n",
    "        return self.__rtruediv__(other)\n",
    "    \n",
    "    def _extgcd(self, a, b):\n",
    "        assert not isinstance(a, ModInt) and not isinstance(b, ModInt)\n",
    "        if a < b:\n",
    "            m, y, x = self._extgcd(b, a)\n",
    "            return (m, x, y)\n",
    "        if b == 0:\n",
    "            x = 1\n",
    "            y = 0\n",
    "            return (a, x, y)\n",
    "        m, y, x = self._extgcd(b, a % b)\n",
    "        y = y - a // b * x\n",
    "        return (m, x, y)\n",
    "\n",
    "    def inverse(self):\n",
    "        a = int(self)\n",
    "        m = int(ModInt.MOD)\n",
    "        n, x, y = self._extgcd(a, m)\n",
    "        if n != 1:\n",
    "            raise ValueError(\"{} and {} are not mutually prime.\".format(a, m))\n",
    "        return ModInt(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ModInt.MOD = 10**9+7\n",
    "a = 10\n",
    "inva = ModInt(a).inverse()\n",
    "print(\"inv({}) \\u2261 {}\".format(a, inva))\n",
    "print(\"{} * {} \\u2261 {}\".format(a, inva, a * inva))"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.8.1-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python38164bitpy38envvenvdb5a67ba2d164185bbc60d730ae2e1eb",
   "display_name": "Python 3.8.1 64-bit ('py38env': venv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}