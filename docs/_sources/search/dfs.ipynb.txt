{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 深さ優先探索 (DFS)\n",
    "\n",
    "グラフの探索手法の1つ。グラフのあるノードから開始し、まだ訪れたことのない隣接ノードを1つ選んで移動し続ける。隣接ノードを選べなくなったら、選べるノードまで戻って探索を続ける。  \n",
    "状態遷移図の探索 (状態の全列挙など) や入れ子構造の探索に向いている。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "説明のため、次のグラフを用いる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy\n",
    "import networkx as nx\n",
    "from networkx.generators.small import *\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "G = bull_graph()\n",
    "N = len(G)\n",
    "numpy.random.seed(3)\n",
    "pos = nx.spring_layout(G)\n",
    "\n",
    "nx.draw_networkx(G, pos, with_labels=True, node_color='w')\n",
    "ax = plt.title(\"Node ID\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 探索経路\n",
    "\n",
    "DFSでは経路上の行き止まりまで到達すると、元来た道を戻る移動 (バックトラック) が発生する。  \n",
    "隣接ノード間の移動時間を1として、ノードごとに入時刻と出時刻を記録しておくことで、探索経路を再現することができる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bfs(N, G, start=0):\n",
    "    t_in = [-1 for i in range(N)]\n",
    "    t_out = [-1 for i in range(N)]\n",
    "\n",
    "    def _bfs(u, t=0):\n",
    "        t_in[u] = t\n",
    "        for v in G[u]:\n",
    "            if t_in[v] < 0:\n",
    "                t = _bfs(v, t+1)+1\n",
    "        t_out[u] = t\n",
    "        return t\n",
    "    \n",
    "    _bfs(start)\n",
    "    return t_in, t_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "t_in, t_out = bfs(N, G, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = dict()\n",
    "for i, (t0, t1) in enumerate(zip(t_in, t_out)):\n",
    "    labels[i] = \"(%d, %d)\" % (t0, t1)\n",
    "\n",
    "nx.draw_networkx(G, pos, with_labels=True, labels=labels, node_color=\"w\")\n",
    "ax = plt.title(\"Route of the DFS\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`t_in` を小さい順に辿ると、ノードの行きがけ順を得ることができる。  \n",
    "`t_out`を小さい順に辿ると帰りがけ順になる。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(sorted(range(N), key=lambda x: t_in[x]))\n",
    "print(sorted(range(N), key=lambda x: t_out[x]))"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python38164bitpy38envvenvdb5a67ba2d164185bbc60d730ae2e1eb",
   "display_name": "Python 3.8.1 64-bit ('py38env': venv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}