{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 多重集合 (Multiset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 順序付き多重集合\n",
    "\n",
    "[【Python】平衡二分木が必要な時に代わりに何とかするテク【競プロ】](https://qiita.com/Salmonize/items/638da118cd621d2628d1)\n",
    "\n",
    "重複あり集合で、順序関係もあわせて保持するもの。C++の`std::multiset`にあたる。\n",
    "\n",
    "- 挿入(add): $\\mathcal{O}(\\log{n})$\n",
    "- 削除(discard): $\\mathcal{O}(\\log{n})$\n",
    "- 最小値の取得(smallest): $\\mathcal{O}(\\log{n})$\n",
    "\n",
    "Pythonではヒープを用いて簡易的に実装できる。この実装では削除時にキーの存在チェックを行わないことに注意。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import heapq\n",
    "\n",
    "\n",
    "class Multiset():\n",
    "\n",
    "    def __init__(self):\n",
    "        self.addset = []\n",
    "        self.delset = []\n",
    "    \n",
    "    def add(self, value):\n",
    "        heapq.heappush(self.addset, value)\n",
    "    \n",
    "    def discard(self, value):\n",
    "        heapq.heappush(self.delset, value)\n",
    "\n",
    "    def smallest(self):\n",
    "        while self.delset and self.addset[0] == self.delset[0]:\n",
    "            heapq.heappop(self.addset)\n",
    "            heapq.heappop(self.delset)\n",
    "        return self.addset[0]\n",
    "    \n",
    "    def is_empty(self):\n",
    "        return len(self.addset) - len(self.delset) <= 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "-2\n-2\n3\n4\n"
    }
   ],
   "source": [
    "S = [3, 7, 3, -2, 4, 5]\n",
    "mset = Multiset()\n",
    "for s in S:\n",
    "    mset.add(s)\n",
    "print(mset.smallest())\n",
    "mset.discard(3)\n",
    "print(mset.smallest())\n",
    "mset.discard(-2)\n",
    "print(mset.smallest())\n",
    "mset.discard(3)\n",
    "print(mset.smallest())"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python38164bitpy38envvenvdb5a67ba2d164185bbc60d730ae2e1eb",
   "display_name": "Python 3.8.1 64-bit ('py38env': venv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}