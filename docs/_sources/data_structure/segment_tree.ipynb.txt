{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# セグメント木\n",
    "\n",
    "## Range Minimum Query (RMQ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rmqinit(size, init_value=-100000000):\n",
    "    \"\"\"セグメント木の初期化\"\"\"\n",
    "    n = 2 ** ((size-1).bit_length())\n",
    "    treesize = n * 2\n",
    "    st = [init_value for i in range(treesize)]\n",
    "    return st\n",
    "\n",
    "\n",
    "def rmqupdate(st, key, value):\n",
    "    \"\"\"セグメント木の更新\"\"\"\n",
    "    n = len(st) // 2\n",
    "    k = key + n\n",
    "    st[k] = value\n",
    "    k >>= 1\n",
    "    while k > 0:\n",
    "        st[k] = max(st[k * 2], st[k * 2 + 1])\n",
    "        k >>= 1\n",
    "\n",
    "\n",
    "def rmqquery(st, a, b, init_value=-100000000):\n",
    "    \"\"\"区間[a, b)の最大値を取得\"\"\"\n",
    "    if a > b:\n",
    "        raise ValueError(\"a must be less than equal b.\")\n",
    "    l = init_value\n",
    "    r = init_value\n",
    "    n = len(st) // 2\n",
    "    a += n\n",
    "    b += n\n",
    "    while a < b:\n",
    "        if a & 1 == 1:\n",
    "            l = max(l, st[a])\n",
    "            a += 1\n",
    "        if b & 1 == 1:\n",
    "            b -= 1\n",
    "            r = max(r, st[b])\n",
    "        a >>= 1\n",
    "        b >>= 1\n",
    "    return max(l, r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = [3, -5, 2, 10, -1, 4, -11]\n",
    "\n",
    "st = rmqinit(len(A))\n",
    "for i in range(len(A)):\n",
    "    rmqupdate(st, i, A[i])\n",
    "\n",
    "print(rmqquery(st, 1, 4))\n",
    "print(rmqquery(st, 4, 7))"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python38164bitpy38envvenvdb5a67ba2d164185bbc60d730ae2e1eb",
   "display_name": "Python 3.8.1 64-bit ('py38env': venv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}