{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python_defaultSpec_1600793662681",
   "display_name": "Python 3.8.1 64-bit ('py38env': venv)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "source": [
    "# 繰り返し二乗法・ダブリング"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "## 繰り返し二乗法"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "べき乗を高速に求めることができるアルゴリズム。  \n",
    "ある数を $N$ 乗するとき、計算量 $\\mathcal{O}(\\log{N})$ でべき乗が求まる。"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "### アルゴリズム\n",
    "\n",
    "例として、 $3^{45} \\pmod{17}$ を求めることを考える。\n",
    "\n",
    "指数を2のべき乗の和で表すと\n",
    "\n",
    "$$\n",
    "\\begin{eqnarray}\n",
    "3^{53} &=& 3^{(1 + 4 + 16 + 32)} \\\\\n",
    "&=& 3^1 \\cdot 3^4 \\cdot 3^{16} \\cdot 3^{32}\n",
    "\\end{eqnarray}\n",
    "$$\n",
    "\n",
    "のように変形できる。\n",
    "$3^k$ は $3^{k-1}$ を2乗すれば求められるから、$3^1, 3^2, 3^4, 3^8, \\ldots$ をこの順に求め、上式に含まれる値のみ掛け算した値を解とすればよい。"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "### 実装"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "繰り返し二乗法の利用例として、 $x^y \\pmod z$ を求める関数の実装を示す。  \n",
    "なお、Pythonの組み込み関数 `pow` も同様に振舞う。"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def modpow(x, y, z):\n",
    "    L = y.bit_length()\n",
    "    a = 1\n",
    "    for i in range(L):\n",
    "        if y & 1 == 1:\n",
    "            a = a * x % z\n",
    "        x = x * x % z\n",
    "        y >>= 1\n",
    "    return a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "5 5\n"
    }
   ],
   "source": [
    "print(modpow(3, 53, 17), pow(3, 53, 17))"
   ]
  },
  {
   "source": [
    "## ダブリング"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "ある状態に対して同じ操作を $N$ 回適用した後の状態について、操作を2のべき乗の和に分解することで高速に求めることができるアルゴリズム。\n",
    "\n",
    "とりうる状態の数を $M$ とすると、計算量は次の通り。\n",
    "\n",
    "- 前処理: $\\mathcal{O}(M\\log{N})$\n",
    "- クエリ; $\\mathcal{O}(\\log{N})$"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "また、先の $x^y \\pmod z$ はダブリングで求められる。  \n",
    "前処理では、法 $z$ のもとでとりうるすべての値 $0\\leq j < z$ について繰り返し二乗法を行う。  \n",
    "配列 $Z[i][j] := j \\cdot 3^{2^i}$ を定義し、この配列に繰り返し二乗法の結果を格納する。\n",
    "\n",
    "実際に $x^y \\pmod z$ を求めるときは、剰余 $j$ とべき乗の指数 $i$ をキーとして、配列から順に取り出せばよい。\n",
    "\n",
    "$$\n",
    "\\begin{eqnarray}\n",
    "1 \\cdot 3^{1} = Z[0][1] &\\equiv& 3 \\pmod{17} \\\\\n",
    "3 \\cdot 3^{4} = Z[2][3] &\\equiv& 5 \\\\\n",
    "5 \\cdot 3^{16} = Z[4][5] &\\equiv& 5 \\\\\n",
    "5 \\cdot 3^{32} = Z[5][5] &\\equiv& 5 \\\\\n",
    "\\therefore 3^{53} &\\equiv& 5\\\\\n",
    "\\end{eqnarray}\n",
    "$$"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "source": [
    "### 実装\n",
    "\n",
    "$x^y \\pmod z$ のダブリングでの実装例を示す。"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def modpow_doubling(x, y, z):\n",
    "    L = y.bit_length()\n",
    "    Z = [[0 for j in range(z)] for i in range(L)]\n",
    "    for j in range(z):\n",
    "        Z[0][j] = j * x % z\n",
    "\n",
    "    for i in range(L-1):\n",
    "        for j in range(z):\n",
    "            Z[i+1][j] = Z[i][Z[i][j]]\n",
    "    \n",
    "    a = 1\n",
    "    for i in range(L):\n",
    "        if y & 1 == 1:\n",
    "            a = Z[i][a]\n",
    "        y >>= 1\n",
    "    return a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "5 5\n"
    }
   ],
   "source": [
    "print(modpow_doubling(3, 53, 17), pow(3, 53, 17))"
   ]
  }
 ]
}